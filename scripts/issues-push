#!/usr/bin/python3
import pycurl
import certifi
from io import BytesIO
import os
import json
import re

issue_repo = ""
github_user = ""
github_token = ""
dry_run = False
input_path = ""


def get_exist_err_packs():
    url = 'https://api.github.com/repos/{}/issues'.format(issue_repo)
    exist_err_packs = []
    while True:
        buffer = BytesIO()
        header = BytesIO()
        c = pycurl.Curl()
        c.setopt(c.URL, url)
        c.setopt(pycurl.WRITEFUNCTION, buffer.write)
        c.setopt(pycurl.HEADERFUNCTION, header.write)
        c.setopt(c.CAINFO, certifi.where())
        c.perform()
        c.close()
        body = buffer.getvalue().decode('UTF-8')
        # print(body)
        issues = json.loads(body)
        # print(issues)
        for issue in issues:
            err_packs = re.findall(
                'ERROR: (.*) failed to build', issue['title'])
            exist_err_packs.extend(err_packs)
            pass
        next_link = re.findall('<([^<>]+)>; rel="next"',
                               header.getvalue().decode('UTF-8'))
        if len(next_link) == 0:
            break
        url = next_link[0]
    return set(exist_err_packs)


def push_issue(post_data):
    c = pycurl.Curl()
    c.setopt(c.URL, 'https://api.github.com/repos/{}/issues'.format(issue_repo))
    c.setopt(c.CAINFO, certifi.where())
    c.setopt(c.CUSTOMREQUEST, 'POST')
    c.setopt(c.USERNAME, github_user)
    c.setopt(c.PASSWORD, github_token)
    buffer = BytesIO()
    c.setopt(pycurl.WRITEFUNCTION, buffer.write)
    # print(post_data['body'])
    # return
    c.setopt(c.POSTFIELDS, json.dumps(post_data))
    if dry_run == False:
        c.perform()
        body = buffer.getvalue().decode('UTF-8')
        ans = json.loads(body)
        if 'url' in ans:
            print("issues url: %s" % ans['url'])
        else:
            print(ans)
    c.close()
    pass


def main():
    opened_issues = get_exist_err_packs()
    print('opened issues[%s]: %s' % (len(opened_issues), opened_issues))
    with open(input_path, 'r') as f:
        issues_collecter = json.loads(f.read())
    compiled_err_issues = set(issues_collecter.keys())
    print('current packages need to be fixed: %s' % compiled_err_issues)
    push_issues = compiled_err_issues.difference(opened_issues)
    # push_issues = compiled_err_issues
    print('need to create issues: %s' % push_issues)
    for issue in push_issues:
        print("create issue: %s" % issue)
        push_issue(issues_collecter[issue])
    pass


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        description='Create compiled error issue from Build log')
    parser.add_argument('-i', '--input', type=str, required=True,
                        help='the file path of stroring issues')
    parser.add_argument('-d', '--dry-run', action='store_true',
                        help='dry run, not push issues')
    parser.add_argument('-ipo', '--issue-repo', type=str, required=True,
                        help='the github repo name that need to create issues[example: Codertocat/Hello-World]')
    parser.add_argument('-u', '--user', type=str, required=True,
                        help='github user who have permission to delete artifacts')
    parser.add_argument('-t', '--token', type=str, required=True,
                        help='user token')
    args = parser.parse_args()
    issue_repo = args.issue_repo
    github_user = args.user
    github_token = args.token
    dry_run = args.dry_run
    input_path = args.input
    main()
